@page "/users/Profil"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject SzakDolgozat.SQL.Interfaces.IFelhasznalo Felhasznalo_Service
@inject NotificationService NotificationService


<div class="container">
    <div class="row">
        <div class="col-4">
        </div>
        <div class="col-4 col-lg-4 col-sm-12">
            <h1 style="color:black">Hozzáadás</h1> <br />
            <RadzenCard class="rz-my-12 rz-mx-auto" Style="max-width: 400px;">
                <br />
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text="@felhasznalo.Felhasznalonev" />
                <br />
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text="@felhasznalo.Nev" />
                <br />
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text="@felhasznalo.Email" />
                <br />
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Jelszó</RadzenText>
                <RadzenPassword Style="width: 100%" aria-label="Default TextBox" @bind-Value="jelszo" />

                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Új Jelszó</RadzenText>
                <RadzenPassword Style="width: 100%" aria-label="Default TextBox" @bind-Value="Ujjelszo" />

                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Új Jelszó Megerősítése</RadzenText>
                <RadzenPassword Style="width: 100%" aria-label="Default TextBox" @bind-Value="Ujjelszo2" />

                <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save" Click="@(() => OnSubmit())" />
                <RadzenButton class="my-3" Icon="assignment" Text="Vissza" Click="@(() => OnNavigateTo($"/users?bejelentkezettfelhasznaloNev={Uri.EscapeDataString(bejelentkezettfelhasznaloNev)}&bejelentkezettRoleID={bejelentkezettRoleID}"))" />

            </RadzenCard>
        </div>
        <div class="col-4">
        </div>
    </div>
</div>




@code {
    private List<Felhasznalo> felhasznalok = new();
    private Felhasznalo felhasznalo = new();
    public static string bejelentkezettfelhasznaloNev;
    public static Guid bejelentkezettRoleID;

    private string felhasznalonev;
    private string Nev;
    private string Email;

    public static string jelszo;
    public static string Ujjelszo;
    public static string Ujjelszo2;

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        bejelentkezettfelhasznaloNev = query["bejelentkezettfelhasznaloNev"];
        Guid.TryParse(query["bejelentkezettRoleID"], out bejelentkezettRoleID);

        felhasznalok = await Felhasznalo_Service.GetFelhasznalok();
        felhasznalo = felhasznalok.FirstOrDefault(x => x.Felhasznalonev == bejelentkezettfelhasznaloNev);
        

    }

    public void OnNavigateTo(string page)
    {
        Navigation.NavigateTo(page);
    }
    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
    private async Task OnSubmit()
    {
        if (string.IsNullOrWhiteSpace(jelszo))
        {
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Hiba",
                    Detail = "A régi jelszót meg kell adni",
                    Duration = 3000,

                });
            return;
        }
        else if (string.IsNullOrWhiteSpace(Ujjelszo))
        {
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Hiba",
                    Detail = "Az Új jelszó mező üres",
                    Duration = 3000
                });
            return;
        }
        else if (string.IsNullOrWhiteSpace(Ujjelszo2))
        {
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Hiba",
                    Detail = "Az Új jelszó megerősítése mező üres",
                    Duration = 3000
                });
            return;
        }
        else if (!PasswordSecurity.ValidatePassword(jelszo,felhasznalo.Jelszo))
        {
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Hiba",
                    Detail = "Helytelen jelszó",
                    Duration = 3000
                });
            return;
        }
        else if (Ujjelszo != Ujjelszo2)
        {
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Hiba",
                    Detail = "Az Új jelszó mezőkbe különbözöt irt",
                    Duration = 3000
                });
            return;
        }
        else
        {
            felhasznalo.Jelszo = PasswordSecurity.HashPassword(Ujjelszo);
            await Felhasznalo_Service.UpdateFelhasznalo(felhasznalo);
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Siker",
                    Detail = "Sikeres adatfelvitel!",
                    Duration = 3000
                });
            Navigation.NavigateTo($"/users?bejelentkezettfelhasznaloNev={Uri.EscapeDataString(bejelentkezettfelhasznaloNev)}&bejelentkezettRoleID={bejelentkezettRoleID}");
            return;
        }

    }
}
