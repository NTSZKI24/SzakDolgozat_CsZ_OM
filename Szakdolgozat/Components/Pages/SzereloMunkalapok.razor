@page "/users/SzereloMunkalapok"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject SzakDolgozat.SQL.Interfaces.ISzerelo_Munka_View Szerelo_Munka_View_Service
@inject SzakDolgozat.SQL.Interfaces.IMunkalap Munkalap_Service


<h3>Munkalapok</h3>

<!-- Hozzáadás gomb a weboldal tetején -->
<br />
<RadzenButton class="my-3" Icon="clear" Text="Szűrők törlése" ButtonStyle="ButtonStyle.Danger" Click="@OnClearFiltersClick" />
@if (filteredMunkalapok == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H2" class="rz-my-6">Munkalapok</RadzenText>
    <RadzenDataGrid @ref="grid" Data="@filteredMunkalapok" FilterMode="FilterMode.Simple" AllowFiltering="true" AllowPaging="true" AllowSorting="true" ColumnWidth="200px" Context="data">
        <Columns>
            <!-- Nyomtatás gomb -->
            <RadzenDataGridColumn Title="Gombok" Sortable="false" Width="1000px">
                <Template Context="data" >
                    <div style="white-space: nowrap;">
                        @if (data.Statusz == StatuszEnum.AlkatreszreVar || data.Statusz == StatuszEnum.Szereles)
                        {
                            <RadzenButton Icon="print" Text="MunkaFolyamatok " ButtonStyle="ButtonStyle.Primary" Click="@(args => OnNavigateTo(data))" />
                        }
                        @if (data.Statusz == StatuszEnum.MunkaElfogadasraVar)
                        {
                            <RadzenButton Icon="print" Text="Elfogadas" ButtonStyle="ButtonStyle.Primary" Click="@(args => OnAcceptClick(data))" />
                        }
                        else if (data.Statusz == StatuszEnum.Szereles)
                        {
                            <RadzenButton Icon="print" Text="MunkaFélbehagyása" ButtonStyle="ButtonStyle.Dark" Click="@(args => OnWaitingClick(data))" />
                        }
                        else if (data.Statusz == StatuszEnum.AlkatreszreVar)
                        {
                            <RadzenButton Icon="print" Text="MunkaFolytatása" ButtonStyle="ButtonStyle.Dark" Click="@(args => OnWorkingClick(data))" />
                        }
                        @if ((data.Statusz == StatuszEnum.Szereles || data.Statusz == StatuszEnum.AlkatreszreVar) && data.MunkaIdo == null)
                        {
                            <RadzenNumeric @bind-Value="data.MunkaIdo" Style="width:100px;" Name="MunkaIdo" />
                            <RadzenButton Icon="print" Text="MunkaIdő" ButtonStyle="ButtonStyle.Dark"  Click="@(args => OnTimeClick(data))" />
                        }
                        @if (data.Statusz == StatuszEnum.AlkatreszreVar || data.Statusz == StatuszEnum.Szereles)
                        {
                                <RadzenButton Icon="print" Text="MunkaLezárása" ButtonStyle="ButtonStyle.Primary" Click="@(args => OnFinishClick(data))" />
                        }
                        

                    </div>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="TulajNev" Title="Tulajdonos Neve" FilterValue="@selectedTulajNev">
                <FilterTemplate>
                    <RadzenTextBox @bind-Value="@selectedTulajNev" Style="width:100%;" />
                </FilterTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Property="Telefonszam" Title="Telefonszám" FilterValue="@selectedTelefonszam">
                <FilterTemplate>
                    <RadzenTextBox @bind-Value="@selectedTelefonszam" Style="width:100%;" />
                </FilterTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Property="Email" Title="Email" FilterValue="@selectedEmail">
                <FilterTemplate>
                    <RadzenTextBox @bind-Value="@selectedEmail" Style="width:100%;" />
                </FilterTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Property="Statusz" Title="Státusz" FilterValue="@selectedStatusz">
                <FilterTemplate>
                    <RadzenDropDown Data="@statuszOptions" @bind-Value="@selectedStatusz" Style="width:100%;" /><!--Itt valami gondok vannak ha Tvaluet irok be-->
                </FilterTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Property="AlvazSzam" Title="Alvázszám" FilterValue="@selectedAlvazSzam">
                <FilterTemplate>
                    <RadzenTextBox @bind-Value="@selectedAlvazSzam" Style="width:100%;" />
                </FilterTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Property="Rendszam" Title="Rendszám" FilterValue="@selectedRendszam">
                <FilterTemplate>
                    <RadzenTextBox @bind-Value="@selectedRendszam" Style="width:100%;" />
                </FilterTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Property="Marka" Title="Márka" FilterValue="@selectedMarka">
                <FilterTemplate>
                    <RadzenTextBox @bind-Value="@selectedMarka" Style="width:100%;" />
                </FilterTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Property="MunkaKezdete" Title="Munka Kezdete" FormatString="{0:d}" FilterValue="@selectedMunkaKezdete">
                <FilterTemplate>
                    <RadzenDatePicker @bind-Value="@selectedMunkaKezdete" Style="width:100%;" AllowClear="true" />
                </FilterTemplate>
            </RadzenDataGridColumn>

            <!-- MunkaIdo, amely int típusú -->
            <RadzenDataGridColumn Property="MunkaIdo" Title="Munkaidő (óra)" FilterValue="@selectedMunkaIdo">
                <FilterTemplate>
                    <RadzenNumeric @bind-Value="@selectedMunkaIdo" ShowUpDown="false" Style="width:100%;" />
                </FilterTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Property="Keltezes" Title="Keltezés" FormatString="{0:d}" FilterValue="@selectedKeltezes">
                <FilterTemplate>
                    <RadzenDatePicker @bind-Value="@selectedKeltezes" Style="width:100%;" AllowClear="true" />
                </FilterTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Property="Osszkoltseg" Title="Összköltség">
                <FilterTemplate>

                </FilterTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Property="TitkarNev" Title="TitkárNév" FilterValue="@selectedTitkarNev">
                <FilterTemplate>
                    <RadzenTextBox @bind-Value="@selectedTitkarNev" Style="width:100%;" />
                </FilterTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="Leiras" Title="Leiras">
                <FilterTemplate>

                </FilterTemplate>
            </RadzenDataGridColumn>
        </Columns>

    </RadzenDataGrid>
}

@code {
    RadzenDataGrid<Szerelo_Munka_View> grid;
    private List<Szerelo_Munka_View> datagrid = new();
    private List<Munkalap> munkalapok = new();
    private List<Szerelo_Munka_View> filteredMunkalapok;
    private Munkalap munka2 = new();
    private List<StatuszEnum> statuszOptions = new();
    DateTime dateTime = DateTime.Now;

    public static string bejelentkezettfelhasznaloNev;
    public static Guid aktualisMunkaFolyamatID;
    public static Guid bejelentkezettID;

    // Szűrő változók
    private string selectedTulajNev;
    private string selectedTelefonszam;
    private string selectedEmail;
    private StatuszEnum? selectedStatusz;
    private string selectedAlvazSzam;
    private string selectedRendszam;
    private string selectedMarka;
    private DateTime? selectedMunkaKezdete;
    private int? selectedMunkaIdo;
    private int? selectedMunkaIdo2;// int típusú szűrő
    private DateTime? selectedKeltezes;
    private long selectedOsszkoltseg;
    private string selectedTitkarNev;
    bool munkaido;
    [Inject]
    public NotificationService notificationService { get; set; }



    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
    }

    protected override async Task OnInitializedAsync()
    {
        statuszOptions = Enum.GetValues(typeof(StatuszEnum)).Cast<StatuszEnum>().ToList();
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        bejelentkezettfelhasznaloNev = query["bejelentkezettfelhasznaloNev"];
        Guid.TryParse(query["bejelentkezettID"], out bejelentkezettID);


        // Adatok lekérése
        datagrid = await Szerelo_Munka_View_Service.GetSzerelo_Munka_Viewok();
        munkalapok = await Munkalap_Service.GetMunkalapok(); 
        filteredMunkalapok = datagrid
        .Where(u => u.SzereloNev == bejelentkezettfelhasznaloNev)  // Itt történik a szűrés
        .ToList();
    }
    public async void OnAcceptClick(Szerelo_Munka_View data)
    {
        var dataID = data.ID;
        var munka2 = munkalapok.FirstOrDefault(x => x.ID == dataID);
        munka2.Statusz = StatuszEnum.Szereles;
        munka2.MunkaKezdete = dateTime;
        await Munkalap_Service.UpdateMunkalap(munka2);
        datagrid = await Szerelo_Munka_View_Service.GetSzerelo_Munka_Viewok();
    }
    public async void OnWorkingClick(Szerelo_Munka_View data)
    {
        var dataID = data.ID;
        var munka2 = munkalapok.FirstOrDefault(x => x.ID == dataID);
        munka2.Statusz = StatuszEnum.Szereles;
        await Munkalap_Service.UpdateMunkalap(munka2);
        datagrid = await Szerelo_Munka_View_Service.GetSzerelo_Munka_Viewok();
    }
    public async void OnWaitingClick(Szerelo_Munka_View data)
    {
        var dataID = data.ID;
        var munka2 = munkalapok.FirstOrDefault(x => x.ID == dataID);
        munka2.Statusz = StatuszEnum.AlkatreszreVar;
        await Munkalap_Service.UpdateMunkalap(munka2);
        datagrid = await Szerelo_Munka_View_Service.GetSzerelo_Munka_Viewok();
    }
    public async void OnTimeClick(Szerelo_Munka_View data)
    {
        var dataID = data.ID;
        var dataMunkaido = data.MunkaIdo;
        var munka2 = munkalapok.FirstOrDefault(x => x.ID == dataID);
        munkaido = false;
        if (dataMunkaido == null)
        {
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Hiba",
                    Detail = "Nincs megadva Munkaidő",
                    Duration = 3000,

                });
            return;
        }
        else if (dataMunkaido <= 0)
        {
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Hiba",
                    Detail = "A munkaidő nem lehet 0-náűl kisebb",
                    Duration = 3000,

                });
            return;
        }
        else
        {
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Sikeres",
                    Detail = "Sikeres adatfelvitel",
                    Duration = 3000,

                });
            munka2.MunkaIdo = dataMunkaido;
            munkaido = true;
            await Munkalap_Service.UpdateMunkalap(munka2);
            datagrid = await Szerelo_Munka_View_Service.GetSzerelo_Munka_Viewok();
            return;


        }
    }
    public async void OnFinishClick(Szerelo_Munka_View data)
    {
        if (data.MunkaIdo == null)
        {
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Hiba",
                    Detail = "Nem lehet lezárni míg nincs megadva munkaidő",
                    Duration = 3000,

                });
            return;
        }
        else if (data.Osszkoltseg == 0)
        {
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Hiba",
                    Detail = "Nem lehet lezárni míg nincs hozzáadva munkafolyamat",
                    Duration = 3000,

                });
            return;
        }
        else
        {
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Sikeres",
                    Detail = "Sikeres adatfelvitel",
                    Duration = 3000,

                });
            var dataID = data.ID;
            var munka2 = munkalapok.FirstOrDefault(x => x.ID == dataID);
            munka2.Keltezes = dateTime;
            munka2.Statusz = StatuszEnum.NyomtatasraVar;
            await Munkalap_Service.UpdateMunkalap(munka2);
            munkalapok = await Munkalap_Service.GetMunkalapok();
            filteredMunkalapok = datagrid
            .Where(u => u.SzereloNev == bejelentkezettfelhasznaloNev)  // Itt történik a szűrés
            .ToList();
            return;


        }
        
    }
    public async void OnNavigateTo(Szerelo_Munka_View data)
    {
        aktualisMunkaFolyamatID = data.ID;
        Navigation.NavigateTo($"/users/SzereloMunkalapok/MunkaFolyamatok?bejelentkezettfelhasznaloNev={Uri.EscapeDataString(bejelentkezettfelhasznaloNev)}&aktualisMunkaFolyamatID={aktualisMunkaFolyamatID}");
    }
    
    async Task OnClearFiltersClick()
    {
        selectedTulajNev = null;
        selectedTelefonszam = null;
        selectedEmail = null;
        selectedStatusz = null;
        selectedAlvazSzam = null;
        selectedRendszam = null;
        selectedMarka = null;
        selectedMunkaKezdete = null;
        selectedMunkaIdo = null;
        selectedKeltezes = null;
        selectedTitkarNev = null;

        // Adatok újra lekérése
        munkalapok = await Munkalap_Service.GetMunkalapok();
        filteredMunkalapok = datagrid
        .Where(u => u.SzereloNev == bejelentkezettfelhasznaloNev)  // Itt történik a szűrés
        .ToList();
    }
}